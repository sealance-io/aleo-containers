name: Check for New Releases

on:
  schedule:
    # Run weekly on Mondays at 2:30 AM UTC
    - cron: '30 2 * * 1'
  workflow_dispatch:
    # Allow manual trigger for testing
    inputs:
      minimum_leo_version:
        description: 'Minimum Leo version to build (defaults to v2.4.1)'
        required: false
        default: 'v2.4.1'
      minimum_amareleo_version:
        description: 'Minimum Amareleo version to build (defaults to v2.1.0)'
        required: false
        default: 'v2.1.0'

jobs:
  check-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      actions: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up variables
        id: vars
        run: |
          echo "leo_repo=ProvableHQ/leo" >> $GITHUB_OUTPUT
          echo "amareleo_repo=kaxxa123/amareleo-chain" >> $GITHUB_OUTPUT
          echo "registry=ghcr.io" >> $GITHUB_OUTPUT
          echo "organization=sealance-io" >> $GITHUB_OUTPUT
          echo "min_leo_version=${{ inputs.minimum_leo_version || 'v2.4.1' }}" >> $GITHUB_OUTPUT
          echo "min_amareleo_version=${{ inputs.minimum_amareleo_version || 'v2.1.0' }}" >> $GITHUB_OUTPUT
      
      - name: Authenticate with Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Check for new Leo releases
        id: check-leo
        run: |
          # Set minimum version
          MIN_VERSION="${{ steps.vars.outputs.min_leo_version }}"
          
          # Normalize minimum version (strip 'v' prefix if present)
          MIN_VERSION_NORM=${MIN_VERSION#v}
          
          # Get the latest releases from GitHub
          LATEST_TAGS=$(gh api repos/${{ steps.vars.outputs.leo_repo }}/releases --jq '.[].tag_name' | sort -V)
          
          # Get current tags from the container registry
          EXISTING_TAGS=$(docker buildx imagetools inspect ${{ steps.vars.outputs.registry }}/${{ steps.vars.outputs.organization }}/leo-lang --format '{{json .Manifest}}' 2>/dev/null | jq -r '.tags[]' || echo "")
          
          NEW_TAGS=""
          QUALIFIED_TAGS=()
          
          # Check for new tags with semantic version filtering
          for TAG in $LATEST_TAGS; do
            # Normalize tag (strip 'v' prefix if present)
            TAG_NORM=${TAG#v}
            
            # Skip tags with versions lower than minimum
            if [[ "$(printf '%s\n' "$MIN_VERSION_NORM" "$TAG_NORM" | sort -V | head -n1)" != "$TAG_NORM" ]]; then
              # This tag meets the minimum version requirement
              # Add to qualified tags array for latest version determination
              QUALIFIED_TAGS+=("$TAG")
              
              # Compare versions using normalized tags (without 'v' prefix)
              if [[ ! "$EXISTING_TAGS" =~ "$TAG" ]]; then
                if [[ -n "$NEW_TAGS" ]]; then
                  NEW_TAGS="$NEW_TAGS,$TAG"
                else
                  NEW_TAGS="$TAG"
                fi
                echo "Found new Leo tag: $TAG (meets minimum version $MIN_VERSION)"
              fi
            else
              echo "Skipping Leo tag: $TAG (below minimum version $MIN_VERSION)"
            fi
          done
          
          # Determine the latest version from all qualified tags
          LATEST_VERSION=""
          if [ ${#QUALIFIED_TAGS[@]} -gt 0 ]; then
            # Sort versions in descending order (latest first)
            SORTED_TAGS=$(printf '%s\n' "${QUALIFIED_TAGS[@]}" | sort -rV)
            # Get the first (latest) version
            LATEST_VERSION=$(echo "$SORTED_TAGS" | head -n1)
            echo "Latest Leo version is: $LATEST_VERSION"
          fi
          
          echo "new_tags=${NEW_TAGS}" >> $GITHUB_OUTPUT
          echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Check for new Amareleo releases
        id: check-amareleo
        run: |
          # Set minimum version
          MIN_VERSION="${{ steps.vars.outputs.min_amareleo_version }}"
          
          # Normalize minimum version (strip 'v' prefix if present)
          MIN_VERSION_NORM=${MIN_VERSION#v}
          
          # Get the latest releases from GitHub
          LATEST_TAGS=$(gh api repos/${{ steps.vars.outputs.amareleo_repo }}/releases --jq '.[].tag_name' | sort -V)
          
          # Get current tags from the container registry
          EXISTING_TAGS=$(docker buildx imagetools inspect ${{ steps.vars.outputs.registry }}/${{ steps.vars.outputs.organization }}/amareleo-chain --format '{{json .Manifest}}' 2>/dev/null | jq -r '.tags[]' || echo "")
          
          NEW_TAGS=""
          QUALIFIED_TAGS=()
          
          # Check for new tags with semantic version filtering
          for TAG in $LATEST_TAGS; do
            # Normalize tag (strip 'v' prefix if present)
            TAG_NORM=${TAG#v}
            
            # Skip tags with versions lower than minimum
            if [[ "$(printf '%s\n' "$MIN_VERSION_NORM" "$TAG_NORM" | sort -V | head -n1)" != "$TAG_NORM" ]]; then
              # This tag meets the minimum version requirement
              # Add to qualified tags array for latest version determination
              QUALIFIED_TAGS+=("$TAG")
              
              # Compare versions using normalized tags (without 'v' prefix)
              if [[ ! "$EXISTING_TAGS" =~ "$TAG" ]]; then
                if [[ -n "$NEW_TAGS" ]]; then
                  NEW_TAGS="$NEW_TAGS,$TAG"
                else
                  NEW_TAGS="$TAG"
                fi
                echo "Found new Amareleo tag: $TAG (meets minimum version $MIN_VERSION)"
              fi
            else
              echo "Skipping Amareleo tag: $TAG (below minimum version $MIN_VERSION)"
            fi
          done
          
          # Determine the latest version from all qualified tags
          LATEST_VERSION=""
          if [ ${#QUALIFIED_TAGS[@]} -gt 0 ]; then
            # Sort versions in descending order (latest first)
            SORTED_TAGS=$(printf '%s\n' "${QUALIFIED_TAGS[@]}" | sort -rV)
            # Get the first (latest) version
            LATEST_VERSION=$(echo "$SORTED_TAGS" | head -n1)
            echo "Latest Amareleo version is: $LATEST_VERSION"
          fi
          
          echo "new_tags=${NEW_TAGS}" >> $GITHUB_OUTPUT
          echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Trigger Leo builds
        if: steps.check-leo.outputs.new_tags != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tags = '${{ steps.check-leo.outputs.new_tags }}'.split(',');
            const latestVersion = '${{ steps.check-leo.outputs.latest_version }}';
            
            for (const tag of tags) {
              // Determine if this is the latest version
              const isLatest = tag === latestVersion;
              console.log(`Triggering build for Leo tag: ${tag} (Latest: ${isLatest})`);
              
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'build-publish-image.yml',
                ref: 'main',
                inputs: {
                  image_name: 'leo-lang',
                  dockerfile: 'leo.Dockerfile',
                  build_standard: 'true',
                  build_ci: 'true',
                  tag_latest: isLatest ? 'true' : 'false',
                  project_version: tag
                }
              });
            }

      - name: Trigger Amareleo builds
        if: steps.check-amareleo.outputs.new_tags != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tags = '${{ steps.check-amareleo.outputs.new_tags }}'.split(',');
            const latestVersion = '${{ steps.check-amareleo.outputs.latest_version }}';
            
            for (const tag of tags) {
              // Determine if this is the latest version
              const isLatest = tag === latestVersion;
              console.log(`Triggering build for Amareleo tag: ${tag} (Latest: ${isLatest})`);
              
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'build-publish-image.yml',
                ref: 'main',
                inputs: {
                  image_name: 'amareleo-chain',
                  dockerfile: 'amareleo.Dockerfile',
                  build_standard: 'true',
                  tag_latest: isLatest ? 'true' : 'false',
                  project_version: tag
                }
              });
            }